name: CI

on:
  push:

env:
  # this is needed if our pipeline publishes to npm
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  # this is needed if our pipeline publishes GitHub packages
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# Needed for nx-set-shas within nx-cloud-main.yml, when run on the main branch
# And to push packages to GitHub container registry. All others may possibly be
# used in further iterations of the pipeline.
permissions:
  actions: write
  contents: write
  deployments: write
  packages: write
  pages: write
  pull-requests: write
  security-events: write

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      # Add support for multi-platform images with QEMU (optional)
      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Add docker engine support to our build container
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Allow us to pull and push containers with the repository packages
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout project files
        uses: actions/checkout@v3
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0

      - name: Calculate SHAs for base and head
        uses: nrwl/nx-set-shas@v3

      - name: Use the package manager cache
        uses: actions/cache@v3
        with:
          path: '${{ github.workspace }}/.yarn/cache'
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-

      - name: Install project dependencies with yarn
        run: yarn install --frozen-lockfile

      - name: Check code style
        run: node_modules/.bin/nx format:check --base=${NX_BASE} --head=${NX_HEAD}

      - name: Check code quality
        run: node_modules/.bin/nx affected --target=lint --base=${NX_BASE} --head=${NX_HEAD} --parallel

      - name: Run unit tests
        run: node_modules/.bin/nx affected --target=test --base=${NX_BASE} --head=${NX_HEAD} --parallel --coverage

      - name: Build release artifacts
        run: node_modules/.bin/nx affected --target=build --base=${NX_BASE} --head=${NX_HEAD} --parallel

      - name: Build and push production containers
        # we need to explicitly pass INPUT_GITHUB_TOKEN here or docker will fail with a missing input error
        run: INPUT_GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} node_modules/.bin/nx affected --target=container --base=${NX_BASE} --head=${NX_HEAD} --parallel --push
